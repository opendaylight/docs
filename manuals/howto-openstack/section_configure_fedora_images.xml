<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
 <!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="configure_fedora_images">
    <title>Configure the Fedora Images for your Environment</title>
    <para>To configure you have 2 options, Fedora 19 and Fedora 20. Fedora 19 is recommanded due to
        Fderoa 20 having an issue with MariaDB and hostnames. For assistance with getting the stack
        going, ping the OVSDB Listserv and check the archives for answers.</para>
    <para>Download the pre-built image that contains OpenDaylight, DevStack installing Ice House
        OpenStack, Open vSwitch all on Fedora:</para>
    <para><emphasis role="bold">Fedora 19:</emphasis></para>
    <para>
        <screen><command>curl -O https://wiki.opendaylight.org/images/HostedFiles/ODL_Devstack_Fedora19.zip
$ unzip ODL_Devstack_Fedora19.zip
# Two files contained
ODL-Devstack-Fedora19-disk1.vmdk
ODL-Devstack-Fedora19.ovf</command></screen>
    </para>
    <para><emphasis role="bold">Fedora 20:</emphasis></para>
    <para>
        <screen><command>$ curl -O https://wiki.opendaylight.org/images/HostedFiles/OpenDaylight_DevStack_Fedora20.ova</command></screen>
    </para>
    <para>Clone this Virtual Machine image into two images. One is for the Control (This VM runs
        both the OpenStack Controller and OpenDaylight Controller) and the other for the Compute
        instance. If you use VM Fusion the vanilla image works as is with no need to change any
        adaptor settings. Use the ‘ip addr’ configuration output as a reference in the next section.
        I recommend using SSH to connect to the host rather then using the TTY interface.</para>
    <para/>
    <para>Here are two screenshots with VirtualBox network adaptor examples. The first are the two
        networks you can create. vxboxnet0 is there by default. Create the 2nd network with the +w/a
        nic picture in the following example. Note: you have to manually fill in the DHCP server
        settings on the new network. Refer to the existing if unsure of the values to use. When
        complete the host OS should be able to reach the guest OS.<inlinemediaobject>
            <imageobject>
                <imagedata fileref="images/VirtualBox-HostOnly-Networks.png"/>
            </imageobject>
        </inlinemediaobject></para>
    <para>The second example is what the VirtualBox NIC setup can look like without have to deal
        with the NAT Network option in VirtualBox. VM Fusion has integrated hooks in to resolve the
        need for host only etc. NAT and Host only work fine with NAT so the host can reach your
        networks default gateway and get to the Inets as needed. With host only that is not the case
        but it is plenty to run the stack and integration.<inlinemediaobject>
            <imageobject>
                <imagedata fileref="images/VirtualBox-HostOnly-Nics.png"/>
            </imageobject>
        </inlinemediaobject></para>
    <para>Boot both guest VMs write down the four IP addresses from both NICs. You will primarily
        only use one of them other then a gateway or out of band SSH connectivity etc.</para>
    <para><emphasis role="bold">Fedora 19:</emphasis></para>
    <para>
        <screen><command>
Login: fedora
Passwd: opendaylight</command></screen>
    </para>
    <para><emphasis role="bold">Fedora 20:</emphasis></para>
    <para>
        <screen><command>
Login: odl
Passwd: odl</command></screen>
    </para>
    <para>In this example the configuration of the IP addresses are as follows:</para>
    <para>
        <screen><command>
Openstack Controller IP == 172.16.86.129
Openstack Compute IP == 172.16.86.128
OpenDaylight Controller IP == 172.16.86.129</command></screen>
    </para>
    <para>Record the IP addresses of both of the hosts:</para>
    <para>Controller IP addresses:</para>
    <para>
        <screen><prompt>[odl@fedora-odl-1 devstack]$</prompt><command>ip addr</command>
<computeroutput>
1: lo: loopback,up,lower_up, mtu 65536 qdisc noqueue state UNKNOWN group default
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth0: &amp;lt;broadcast,multicast,up,lower_up&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
link/ether 00:0c:29:35:0b:65 brd ff:ff:ff:ff:ff:ff
inet 172.16.47.134/24 brd 172.16.47.255 scope global dynamic eth0
valid_lft 1023sec preferred_lft 1023sec
inet6 fe80::20c:29ff:fe35:b65/64 scope link
valid_lft forever preferred_lft forever
3: eth1: &amp;lt;broadcast,multicast,up,lower_up&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
link/ether 00:0c:29:35:0b:6f brd ff:ff:ff:ff:ff:ff
inet 172.16.86.129/24 brd 172.16.86.255 scope global dynamic eth1
valid_lft 1751sec preferred_lft 1751sec
inet6 fe80::20c:29ff:fe35:b6f/64 scope link
valid_lft forever preferred_lft forever</computeroutput></screen>
    </para>
    <para>Compute IP addresses:</para>
    <para>
        <screen><prompt>[odl@fedora-odl-2 ~]$</prompt><command>ip addr</command>
<computeroutput>
1: lo: &amp;lt;loopback,up,lower_up&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth0: &amp;lt;broadcast,multicast,up,lower_up&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
link/ether 00:0c:29:85:2d:f2 brd ff:ff:ff:ff:ff:ff
inet 172.16.47.133/24 brd 172.16.47.255 scope global dynamic eth0
valid_lft 1774sec preferred_lft 1774sec
inet6 fe80::20c:29ff:fe85:2df2/64 scope link
valid_lft forever preferred_lft forever
3: eth1: &amp;lt;broadcast,multicast,up,lower_up mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
link/ether 00:0c:29:85:2d:fc brd ff:ff:ff:ff:ff:ff
inet 172.16.86.128/24 brd 172.16.86.255 scope global dynamic eth1
valid_lft 1716sec preferred_lft 1716sec
inet6 fe80::20c:29ff:fe85:2dfc/64 scope link
valid_lft forever preferred_lft forever</computeroutput></screen>
    </para>
    <para>Go to the home directory of the user id odl:</para>
    <para>
        <screen><command>$ cd ~/</command></screen>
    </para>
    <para>Start the OVS Service (DevStack should start this svc). This startup script can be loaded
        at startup of OVS to load at the OS init.</para>
    <para>
        <screen><command> sudo /sbin/service openvswitch start </command></screen>
    </para>
    <para>Configure the /etc/hosts file to reflect your controller and compute hostname mappings.
        While not necessarily required it can cause issues for Nova output.</para>
    <para>Verify the OpenStack Controller /etc/hosts file. The only edit is adding the compute IP to
        hostname mapping. E.g. x.x.x.x fedora-odl-2</para>
    <para>
        <screen><prompt>[odl@fedora-odl-1 ~]$</prompt><command>sudo vi /etc/hosts</command>
<computeroutput>
127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 fedora-odl-1
172.16.86.128 fedora-odl-2
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 </computeroutput></screen>
    </para>
    <para>Edit the compute nodes /etc/hosts from fedora-odl-1 to fedora-odl-2:</para>
    <para>
        <screen><prompt>[odl@fedora-odl-2 ~]$</prompt><command>sudo vi /etc/hosts</command>
<computeroutput>
$ cat /etc/hosts
127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 fedora-odl-2
172.16.86.129 fedora-odl-1
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6</computeroutput></screen>
    </para>
    <para>Then, change the compute hostname from (compute only):</para>
    <para>
        <screen><command>$ sudo vi /etc/hostname</command>
<command># Change to:</command>
<command>$ cat /etc/hostname</command>
<command>fedora-odl-2</command>
<command>$sudo vi /etc/sysconfig/network</command>
<command>#Change HOSTNAME=fedora-odl-1 to HOSTNAME=fedora-odl-2</command>
<command>$sudo hostname -b fedora-odl-2</command></screen>
    </para>
    <para>Then, reboot the cloned Compute node for the change to take affect:</para>
    <para>
        <screen><command>sudo shutdown -r now</command></screen>
    </para>
    <para>After the host restarts verify the hostnames like so:</para>
    <para>
        <screen><command> $ hostname</command>
<command>fedora-odl-2</command></screen>
    </para>
    <para>Note: Iin the Fedora 20 VM, commenting out “#127.0.0.1 localhost fedora-odl-1″ will result
        in a crash of MySql. Avoid doing any changes to the host name locally resolving to
        127.0.0.1.</para>
    <para>
        <screen><computeroutput>
An unexpected error prevented the server from fulfilling your request. (OperationalError) (1045, "Access denied for user 'root'@'fedora-odl-1' (using password: YES)") None None (HTTP 500)
2014-02-10 04:03:28 + KEYSTONE_SERVICE=
2014-02-10 04:03:28 + keystone endpoint-create --region RegionOne --service_id --publicurl http://172.16.86.129:5000/v2.0 --adminurl http://172.16.86.129:35357/v2.0 --internalurl http://172.16.86.129:5000/v2.0
2014-02-10 04:03:28 usage: keystone endpoint-create [--region ] --service
2014-02-10 04:03:28 --publicurl 2014-02-10 04:03:28 [--adminurl ]
2014-02-10 04:03:28 [--internalurl ]
2014-02-10 04:03:28 keystone endpoint-create: error: argument --service/--service-id/--service_id: expected one argument
2014-02-10 04:03:28 ++ failed</computeroutput></screen>
    </para>
  </section>
