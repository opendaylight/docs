<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
 <!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">
]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="ovsdb_project">
    <title>OVSDB Project Control and Management Logic</title>
    <para>OpenFlow v1.3 and OVSDB we're used in the OVSBD project Openstacj implementation. We chose
        not to use any extensions or the use of agents. Open vSwitch supported the necessary
        OpenFlow v1.3 and OVSDB functionality we required for this architecture. Those of us in the
        OVSDB project are pretty agnostic to southbound protocols as long as there is a healthy
        adoption so as not to waste our time and based on open standards such as OpenFlow v1.3, RFCs
        7047 (Informational OVSDB RFC) and/or de facto drafts like
        draft-mahalingam-dutt-dcops-vxlan(VXLAN framing). We are keen to see NXM extension
        functionality upstream into the OpenFlow specification. OVS ARP responder is something we
        are beginning to work on proofing now. NXM and OXM extensions merging for ARP and Tunnel
        feature parity would make our design and coding lives easier. The overall architecture looks
        something like the following. I have hardware TEPs in the diagram. We have cycles to help
        hardware vendors implement the hardware_vtep database schema (assuming they prescribe to
        open operating systems):</para>
    <para><inlinemediaobject>
            <imageobject>
                <imagedata fileref="images/Overlay-OpenDaylight-OVSDB-OpenFlow.png"/>
            </imageobject>
        </inlinemediaobject></para>
    <para>The provider segmentation keys used in the encap (GRE key/VNI) is a hash of Network and
        Tenant ID since as long as we are subnet bound, networks will always need to support
        multi-tenant logical networks until we eradicate L2 all together. The design is flexible and
        as generic as possible to allow for any vendor to add differentiation on top of the base
        network virtualization. Of course, we have plenty to do between now and stability, so moving
        right along.</para>
    <para>A quick visual of the OVSDB Neutron implementation code flow itself and how it ties into
        the controller project and OpenStack:</para>
    <para><inlinemediaobject>
            <imageobject>
                <imagedata fileref="images/OVSDB-Architecture.png"/>
            </imageobject>
        </inlinemediaobject></para>
  </section>
