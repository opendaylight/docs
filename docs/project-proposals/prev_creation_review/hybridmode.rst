Name
----

Hybrid Mode

Repo Name
---------

ofhybrid

Description
-----------

“OpenFlow-hybrid mode” describes the operation of a network that uses
traditional forwarding in addition to an overlay of Openflow rules for
handling specific types of traffic. we are proposing to add
functionality to the controller to have it operate in Openflow hybrid
mode, as a configurable option, within a single OpenFlow instance. What
this reduces to is the controller delegating some forwarding decisions
to controlled switches, rather than making those decisions directly
itself.

“OpenFlow-hybrid mode” is not referring to a heterogeneous network which
is made up of some OpenFlow switches and some traditional switches. We
are also not referring to a single switch with OpenFlow on one vlan and
traditional forwarding on another vlan.

There are many simple SDN applications that are designed to run on
Openflow hybrid networks such as packet capture apps, load balancing
apps, security inspection apps, etc.

The OpenFlow specification has supported “OpenFlow-hybrid mode” since
version 1.3 of the spec. The spec defines two classifications of
switches. OpenFlow-only switches are those switches which completely
rely upon the controller to make all forwarding decisions.
OpenFlow-hybrid switches are those switches which support OpenFlow, but
also support a traditional networking pipeline for protocols like
spanning-tree, OSPF, etc.

The OpenFlow specification also supports “OpenFlow-hybrid mode” via the
NORMAL port. The NORMAL port tells the switch to forward the packet
according to the traditional networking pipeline. By instructing the
switch to forward to the NORMAL port, the controller can delegate the
forwarding decision to the switch on a per-flow or per-class basis, or
any other subset of all packets on the network.

It is important to note that when the controller makes use of the NORMAL
port, the controller is still retaining control over the network,
because the controller is instructing the switches how to forward the
packet. The controller retains control without itself making the
forwarding decision.

Slides for this proposal can be found here
https://wiki.opendaylight.org/view/File:ODL_Hybrid_Mode.pdf

Scope
-----

The changes needed in OpenDaylight to support hybrid mode mainly consist
of adjusting the flow mods (OpenFlow forwarding rules) which we send to
switches. We would need to adjust the rules that are sent initially
after a switch connects, and in an ongoing basis in a running
environment.

The controller would send a default rule which tells the switch to
forward packets to the NORMAL port. This rule delegates the forwarding
decision to the controlled switches, but it means that the controller
would receive ZERO packet_in messages if no other rules were pushed. For
this reason, we’d put this rule at priority 0 in the last hardware OF
table of the pipeline. Without this rule, the default behavior for OF
1.0 is to steal to the controller and the default behavior for OF 1.3 is
to drop all packets.

Link discovery would need to send a rule which steals all
controller-generated link discovery packets to the controller. This
would not include LLDP generated by the switches themselves, assuming we
can distinguish controller-generated packets from switch-generated
packets based upon ethertype (see the Safe Link Discovery presentation
for details).

Host discovery would need to send a rule which copies (not steals) all
ARP requests and replies. Host discovery would also need to send a rule
which copies (not steals) all DHCP offers. Since these packets are
copied, the controller would not re-inject these packets.

Any path-paving applications would need to be disabled, because the
controller would not want to pave paths except where the controller’s
path paving was functionally desirable (from an end-host perspective)
over traditional forwarding.

We also propose that we implement a mechanism in OpenDaylight whereby
applications can register to supply initial OpenFlow rules when a switch
connects. These initial rules would be used to get packets to the
application so the application can make the forwarding decision.

Resources Committed (developers committed to working)
-----------------------------------------------------

TBD

Initial Committers
------------------

Rex Pugh - rex.pugh@hp.com

Julie Britt

Vendor Neutral
--------------

The functionality described in this proposal is implemented in the HP
proprietary controller. Some HP code may be leveraged for use in
OpenDaylight. All contributed code will adhere to OpenDaylight's
copyright and license policies.

Meets Board Policy (including IPR)
----------------------------------
