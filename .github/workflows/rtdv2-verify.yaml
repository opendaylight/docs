---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation
# yamllint disable rule:line-length

name: RTDv2 Verify

on:
  workflow_dispatch:
    inputs:
      GERRIT_BRANCH:
        description: "Branch that change is against"
        required: false
        default: "master"
        type: string
      GERRIT_CHANGE_ID:
        description: "The ID for the change"
        required: false
        type: string
      GERRIT_CHANGE_NUMBER:
        description: "The Gerrit number"
        required: false
        type: string
      GERRIT_CHANGE_URL:
        description: "URL to the change"
        required: true
        type: string
      GERRIT_EVENT_TYPE:
        description: "Type of Gerrit event"
        required: false
        type: string
      GERRIT_PATCHSET_NUMBER:
        description: "The patch number for the change"
        required: true
        type: string
      GERRIT_PATCHSET_REVISION:
        description: "The revision sha"
        required: false
        type: string
      GERRIT_PROJECT:
        description: "Project in Gerrit"
        required: false
        default: "docs"
        type: string
      GERRIT_REFSPEC:
        description: "Gerrit refspec of change"
        required: false
        type: string

concurrency:
  group: rtdv2-verify-${{ github.ref }}
  cancel-in-progress: true

env:
  DEFAULT_PYTHON: 3.8
  READTHEDOCS_FOUND: true
  TOX_ENVS: docs,docs-linkcheck
  TOX_DIR: docs/
  DOC_DIR: _build/html
  PARALLEL: true
  DEFAULT_VERSION: latest
  MASTER_RTD_PROJECT: doc

permissions: read-all

jobs:
  rtdv2-verify:
    if: false  # Disabled - using RTDv3 validation instead
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check if running in ACT
        run: |
          if [[ "${{ env.ACT }}" == "true" ]]; then
            echo "Running RTDv2 verification via ACT (local mode)"
          else
            echo "Running RTDv2 verification via GitHub (CI mode)"
          fi

      # Local checkout for ACT
      - uses: actions/checkout@v4
        if: ${{ env.ACT == 'true' }}

      # Gerrit checkout for CI
      - name: Gerrit Checkout
        if: ${{ env.ACT != 'true' }}
        uses: lfit/checkout-gerrit-change-action@54d751e8bd167bc91f7d665dabe33fae87aaaa63  # v0.9
        with:
          gerrit-refspec: ${{ inputs.GERRIT_REFSPEC }}
          gerrit-project: ${{ inputs.GERRIT_PROJECT }}
          gerrit-url: ${{ vars.GERRIT_URL }}
          delay: "0s"
          submodules: "true"

      # Python version detection (local version for ACT)
      - name: Get Python version from TOX configuration (local)
        if: ${{ env.ACT == 'true' }}
        id: python-version-from-tox-local
        run: |
          if [ -f "docs/tox.ini" ]; then
            python_version=$(grep -oP '(?<=^basepython = python)\K(.*)' docs/tox.ini | head -1 || echo "")
            echo "extracted_string=${python_version}" >> "$GITHUB_OUTPUT"
          else
            echo "extracted_string=" >> "$GITHUB_OUTPUT"
          fi

      # Python version detection (CI version)
      - name: Get Python version from TOX configuration (CI)
        if: ${{ env.ACT != 'true' }}
        id: python-version-from-tox
        run: |
          if [ -f "docs/tox.ini" ]; then
            python_version=$(grep -oP '(?<=^basepython = python)\K(.*)' docs/tox.ini | head -1 || echo "")
            echo "extracted_string=${python_version}" >> "$GITHUB_OUTPUT"
          else
            echo "extracted_string=" >> "$GITHUB_OUTPUT"
          fi

      # Python setup (local ACT version)
      - name: Setup Python [DOCS/TOX.INI] (local)
        if: ${{ env.ACT == 'true' && steps.python-version-from-tox-local.outputs.extracted_string != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ steps.python-version-from-tox-local.outputs.extracted_string }}"

      - name: Setup Python [DEFAULT] (local)
        if: ${{ env.ACT == 'true' && steps.python-version-from-tox-local.outputs.extracted_string == '' }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.DEFAULT_PYTHON }}"

      # Python setup (CI version)
      - name: Setup Python [DOCS/TOX.INI] (CI)
        if: ${{ env.ACT != 'true' && steps.python-version-from-tox.outputs.extracted_string != '' }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        id: setup-python-from-tox
        with:
          python-version: "${{ steps.python-version-from-tox.outputs.extracted_string }}"

      - name: Setup Python [DEFAULT] (CI)
        if: ${{ env.ACT != 'true' && steps.python-version-from-tox.outputs.extracted_string == '' }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        id: setup-default-python
        with:
          python-version: "${{ env.DEFAULT_PYTHON }}"

      # Install graphviz
      - name: Install graphviz (local)
        if: ${{ env.ACT == 'true' }}
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: Install graphviz (CI)
        if: ${{ env.ACT != 'true' }}
        run: sudo apt-get update && sudo apt-get install -y graphviz

      # Check readthedocs config
      - name: Verify If readthedocs Config exists
        run: |
          echo "Verifying if readthedocs.yaml config file exists"
          if [ ! -f .readthedocs.yaml ] ; then
            echo "INFO Config file not found. Skipping further checks."
            echo "READTHEDOCS_FOUND=false" >> "$GITHUB_ENV"
          fi

      # Install dependencies
      - name: Installing dependencies
        if: ${{ env.READTHEDOCS_FOUND == 'true' }}
        run: |
          python -m pip install --upgrade pip
          # RTDv2 compatible version of lftools and dependencies
          pip install 'lftools<1.0.0' 'niet~=1.4.2' 'cryptography<3.4' yq tox
          # urllib3 needs to be pinned to avoid timeouts
          pip install --upgrade urllib3~=1.26.15

      # Run tox
      - name: Running tox
        if: ${{ env.READTHEDOCS_FOUND == 'true' }}
        run: |
          PATH="${GITHUB_WORKSPACE}/.local/bin:${PATH}"
          cd "${GITHUB_WORKSPACE}/${{ env.TOX_DIR }}" || exit 1

          if [[ -d /opt/pyenv ]]; then
              echo "---> Setting up pyenv"
              export PYENV_ROOT="/opt/pyenv"
              export PATH="$PYENV_ROOT/bin:$PATH"
              PYTHONPATH="$(pwd)"
              export PYTHONPATH
              export TOX_TESTENV_PASSENV=PYTHONPATH
          fi

          tox --version

          TOX_OPTIONS_LIST=""
          if [[ -n "${{ env.TOX_ENVS }}" ]]; then
              TOX_OPTIONS_LIST="${TOX_OPTIONS_LIST} -e ${{ env.TOX_ENVS }}"
          fi

          case "${{ env.PARALLEL }}" in
              true|auto)
                  TOX_OPTIONS_LIST="${TOX_OPTIONS_LIST} --parallel auto --parallel-live";;
              all)
                  TOX_OPTIONS_LIST="${TOX_OPTIONS_LIST} --parallel all --parallel-live";;
              [0-9]*)
                  TOX_OPTIONS_LIST="${TOX_OPTIONS_LIST} --parallel ${{ env.PARALLEL }} --parallel-live";;
          esac

          tox "$TOX_OPTIONS_LIST"
          echo "---> Completed tox runs"

      # RTDv2 integration (CI only)
      - name: Running rtdv2
        if: ${{ env.ACT != 'true' && env.READTHEDOCS_FOUND == 'true' }}
        run: |
          echo "---> Running rtdv2"
          set -euo pipefail

          # RTDv2 webhook-based build trigger
          rtd_webhook_trigger(){
              echo "INFO: Triggering RTD build via webhook for branch $1"
              local branch="$1"
              local webhook_url="${{ vars.RTD_WEBHOOK_URL }}"

              if [[ -z "$webhook_url" ]]; then
                  echo "ERROR: RTD_WEBHOOK_URL variable not configured"
                  echo "Please set RTD_WEBHOOK_URL in repository variables"
                  echo "Example: https://readthedocs.org/api/v2/webhook/your-project/12345/"
                  return 1
              fi

              echo "INFO: Using webhook URL: $webhook_url"

              # RTDv2 webhook trigger using form-data (like your successful test)
              response=$(curl -s -X POST \
                  -d "branches=${branch}" \
                  -d "token=${{ secrets.RTD_TOKEN }}" \
                  "${webhook_url}")

              echo "INFO: Webhook response: $response"

              # Check if build was triggered successfully
              if echo "$response" | grep -q '"build_triggered":true'; then
                  echo "INFO: Build triggered successfully for branch: $branch"
                  return 0
              else
                  echo "WARNING: Build trigger may have failed"
                  echo "Response: $response"
                  return 1
              fi
          }

          echo "INFO:"
          echo "INFO: Project: ${{ inputs.GERRIT_PROJECT }}"
          echo "INFO: Branch: ${{ inputs.GERRIT_BRANCH }}"
          echo "INFO: Read the Docs Project: https://opendaylight.readthedocs.io"

          # For verification, trigger webhook for the current branch
          branch_name="${{ inputs.GERRIT_BRANCH }}"
          if rtd_webhook_trigger "$branch_name"; then
              echo "INFO: RTD verification webhook triggered successfully"
          else
              echo "WARNING: RTD verification webhook failed, but continuing"
          fi

          echo "INFO: Verify job completed"

      # Summary step
      - name: Job Summary
        run: |
          if [[ "${{ env.ACT }}" == "true" ]]; then
            echo "✅ Local RTDv2 verification completed (docs build + linkcheck)"
            echo "Note: RTD webhook triggering skipped in local mode"
          else
            echo "✅ Full RTDv2 verification completed (docs build + linkcheck + RTD webhook triggers)"
          fi
